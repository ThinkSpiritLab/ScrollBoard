{"version":3,"sources":["serviceWorker.ts","app/util.ts","app/vo.ts","app/Loader.tsx","app/Board.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","toString","onerror","readAsText","delay","ms","setTimeout","ProblemStateKind","reveal","calcRankInplace","state","teamStates","sort","lhs","rhs","solved","penalty","lhsId","parseInt","info","id","rhsId","last_solved","last_penalty","last_rank","forEach","team","idx","wildcard","rank","checked","cursor","focus","index","p","problemStates","find","Pending","tick","isAccepted","unrevealedSubmissions","some","s","accepted","teamId","problemId","Passed","findIndex","tryCount","length","acceptTime","submitTime","penaltyTime","undefined","firstSolvers","Failed","revealedSubmissions","push","prevRank","curRank","console","log","name","t","Object","is","getRemoteFileUrl","value","queryString","search","Loader","onLoad","onStart","useState","fileName","setFileName","fileInputRef","useRef","data","setData","handleLoad","a","currentTarget","files","item","util","content","JSON","parse","problems","tag","useEffect","remoteFileUrl","fetch","resp","json","loadRemote","catch","err","error","Form","useForm","form","handleStart","useCallback","autoReveal","getFieldValue","shiningBeforeReveal","speedFactor","parseFloat","showMedal","medal","darkMode","style","borderColor","boxShadow","type","display","multiple","ref","onChange","justify","alignItems","flexGrow","textAlign","margin","icon","UploadOutlined","onClick","current","click","marginTop","column","xs","lg","title","width","fontSize","Item","label","duration","defaultValue","freezeTime","formatter","v","String","Number","step","teams","submissions","span","flexWrap","map","key","marginRight","height","backgroundColor","color","borderRadius","layout","initialValues","valuePropName","min","max","justifyContent","PlayCircleOutlined","messageInfo","message","className","Board","options","useMemo","teamMap","Map","contestant","set","problem","Untouched","submission","get","Error","Array","from","entries","vo","setState","highlightItem","setHighlightItem","revealGen","highlightNodeRef","highlightFlag","setHighlightFlag","keyLock","setKeyLock","setAutoReveal","setSpeedFactor","focusIndex","setFocusIndex","handleNextStep","Date","getTime","prevCursorIdx","next","rect","document","querySelector","getBoundingClientRect","scrollTo","left","top","scrollY","innerHeight","behavior","done","scrollIntoView","handleKeydown","Math","toFixed","addEventListener","removeEventListener","handleClick","timer","setInterval","clearInterval","f","innerWidth","windowWidth","setWindowWidth","onresize","handleMovingFinished","position","zIndex","onFinish","isFocused","whiteBorder","darkBorder","border","background","transform","userName","maxWidth","whiteSpace","gender","WomanOutlined","round","isHighlighted","text","cvtColor","grid","minHeight","transition","opacity","transitionStyles","entering","entered","exiting","exited","unmounted","wrappedGrid","Transition","in","timeout","nodeRef","App","setOptions","running","setRunning","debug","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8f081e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function readFile(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (e: ProgressEvent<FileReader>): void => {\n            resolve(e.target?.result?.toString());\n        };\n\n        reader.onerror = ((e): void => reject(e));\n\n        reader.readAsText(file);\n    });\n}\n\nexport function delay(ms: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(), ms);\n    });\n}","import * as dto from \"./dto\";\n\nexport interface TeamState {\n    info: dto.Team;\n    rank: number;\n    solved: number;\n    penalty: number;\n    problemStates: ProblemState[]\n}\n\nexport interface ProblemState {\n    info: dto.Problem;\n    revealedSubmissions: dto.Submission[];\n    unrevealedSubmissions: dto.Submission[];\n    state: ProblemStateKind;\n    tryCount: number;\n    acceptTime: number | null;\n}\n\nexport enum ProblemStateKind {\n    Passed,\n    Failed,\n    Pending,\n    Untouched,\n}\n\nexport interface ContestState {\n    teamStates: TeamState[]\n    info: dto.Contest;\n    firstSolvers: { [problemId: string]: string | undefined; } // problemId -> teamId\n    cursor: {\n        index: number,\n        tick: number,\n        focus: number\n    };\n}\n\nexport function calcContestState(data: dto.Contest): ContestState {\n    const teamMap: Map<string, TeamState> = new Map<string, TeamState>();\n    const firstSolvers: { [problemId: string]: string | undefined; } = {};\n\n    data.teams.forEach(contestant => {\n        teamMap.set(\n            contestant.id,\n            {\n                info: contestant,\n                rank: 0,\n                solved: 0,\n                penalty: 0,\n                problemStates: data.problems.map(problem => ({\n                    info: problem,\n                    revealedSubmissions: [],\n                    unrevealedSubmissions: [],\n                    state: ProblemStateKind.Untouched,\n                    tryCount: 0,\n                    acceptTime: null,\n                }))\n            });\n    });\n\n    data.submissions.sort((lhs, rhs) => lhs.submitTime - rhs.submitTime);\n    data.problems.sort((lhs, rhs) => {\n        if (lhs.tag !== rhs.tag) {\n            return lhs.tag < rhs.tag ? (-1) : 1;\n        }\n        return 0;\n    });\n\n    data.submissions.forEach(submission => {\n        const team = teamMap.get(submission.teamId);\n        if (!team) {\n            return;\n        }\n        const p = team.problemStates.find(p => p.info.id === submission.problemId);\n        if (!p) {\n            throw new Error(\"invalid data\");\n        }\n        if (p.state === ProblemStateKind.Passed) {\n            return;\n        }\n        if (submission.submitTime < data.freezeTime) {\n            p.revealedSubmissions.push(submission);\n            p.tryCount += 1;\n            if (submission.accepted) {\n                p.state = ProblemStateKind.Passed;\n                p.acceptTime = submission.submitTime;\n                team.solved += 1;\n                team.penalty += p.acceptTime + data.penaltyTime * 60000 * (p.tryCount - 1);\n                if (firstSolvers[p.info.id] === undefined) {\n                    firstSolvers[p.info.id] = team.info.id;\n                }\n            } else {\n                p.state = ProblemStateKind.Failed;\n            }\n        } else {\n            p.unrevealedSubmissions.push(submission);\n            p.tryCount += 1;\n            p.state = ProblemStateKind.Pending;\n        }\n    });\n\n    const teamStates = Array.from(teamMap.entries()).map((e) => e[1]);\n    const state = {\n        teamStates,\n        info: data,\n        firstSolvers,\n        cursor: {\n            index: teamStates.length - 1,\n            tick: 0,\n            focus: teamStates.length - 1\n        }\n    };\n    calcRankInplace(state);\n    return state;\n}\n\nexport function calcRankInplace(state: ContestState): void {\n    state.teamStates.sort((lhs, rhs) => {\n        if (lhs.solved !== rhs.solved) {\n            return -(lhs.solved - rhs.solved);\n        }\n        if (lhs.penalty !== rhs.penalty) {\n            return (lhs.penalty - rhs.penalty);\n        }\n        // if (lhs.info.name !== rhs.info.name) {\n        //     return lhs.info.name < rhs.info.name ? (-1) : (1);\n        // }\n        const lhsId = parseInt(lhs.info.id);\n        const rhsId = parseInt(rhs.info.id);\n        if (lhsId !== rhsId) {\n            return lhsId < rhsId ? (-1) : (1);\n        }\n        return 0;\n    });\n\n    let last_solved = 0;\n    let last_penalty = 0;\n    let last_rank = 1;\n    state.teamStates.forEach((team, idx) => {\n        if (team.info.wildcard) {\n            team.rank = last_rank;\n            return;\n        }\n        if (team.solved < last_solved || team.penalty > last_penalty) {\n            last_rank = idx + 1;\n        }\n        team.rank = last_rank;\n        last_solved = team.solved;\n        last_penalty = team.penalty;\n    });\n}\n\nexport type HighlightItem = {\n    teamId: string;\n    problemId: string;\n    accepted: boolean;\n}\n\nexport type RevealGen = Generator<HighlightItem | undefined, void, void>;\n\nexport function* reveal(state: ContestState): Generator<HighlightItem | undefined, void, void> {\n    let checked = true;\n    while (state.cursor.index >= 0) {\n        state.cursor.focus = state.cursor.index;\n        const team = state.teamStates[state.cursor.index];\n        const p = team.problemStates.find(p => p.state === ProblemStateKind.Pending);\n        if (p) {\n            if (!checked) {\n                state.cursor.tick += 1;\n                yield;\n            }\n\n            const isAccepted = p.unrevealedSubmissions.some((s) => s.accepted);\n            state.cursor.tick += 1;\n            yield {\n                teamId: team.info.id,\n                problemId: p.info.id,\n                accepted: isAccepted\n            };\n            if (isAccepted) {\n                p.state = ProblemStateKind.Passed;\n                const idx = p.unrevealedSubmissions.findIndex(s => s.accepted);\n                p.tryCount = p.tryCount - p.unrevealedSubmissions.length + idx + 1;\n                p.acceptTime = p.unrevealedSubmissions[idx].submitTime;\n                team.solved += 1;\n                team.penalty += p.acceptTime + state.info.penaltyTime * 60000 * (p.tryCount - 1);\n                if (state.firstSolvers[p.info.id] === undefined) {\n                    state.firstSolvers[p.info.id] = team.info.id;\n                }\n            } else {\n                p.state = ProblemStateKind.Failed;\n            }\n            p.revealedSubmissions.push(...p.unrevealedSubmissions);\n            p.unrevealedSubmissions = [];\n            yield;\n            const prevRank = team.rank;\n            calcRankInplace(state);\n            const curRank = team.rank;\n            console.log(`team \"${team.info.name}\" rank ${prevRank} -> ${curRank}`);\n            state.cursor.focus = state.teamStates.findIndex(t => Object.is(t, team));\n            state.cursor.tick += 1;\n            yield;\n            checked = true;\n        }\n        else {\n            if (!checked) {\n                console.log(\"yield at cursor index = \", state.cursor.index);\n                state.cursor.tick += 1;\n                yield;\n            }\n            state.cursor.index -= 1;\n            checked = false;\n        }\n    }\n    state.cursor.focus = -1;\n}\n\nexport interface BoardOptions {\n    autoReveal: boolean;\n    shiningBeforeReveal: boolean;\n    speedFactor: number;\n    showMedal: boolean;\n    darkMode: boolean;\n}\n\nexport const MIN_SPEED_FACTOR = 0.1;\nexport const MAX_SPEED_FACTOR = 10;\n\nexport const FLIP_MOVE_DURATION = 800;\n","import * as dto from \"./dto\";\nimport * as util from \"./util\";\nimport * as vo from \"./vo\";\n\nimport React, { useState, useRef, useEffect, useCallback, } from \"react\";\nimport { Card, Button, Row, Divider, Descriptions, Space, Tag, Col, Form, Switch, InputNumber } from \"antd\";\nimport { UploadOutlined, PlayCircleOutlined } from \"@ant-design/icons\";\nimport * as queryString from \"query-string\";\n\nexport interface LoaderProps {\n    onLoad: (data: dto.Contest) => void;\n    onStart: (options: vo.BoardOptions) => void;\n}\n\nfunction getRemoteFileUrl(): string | undefined {\n    const value = queryString.parse(window.location.search)[\"data-url\"];\n    if (typeof value === \"string\") {\n        return value;\n    } else {\n        return undefined;\n    }\n}\n\nconst Loader: React.FC<LoaderProps> = ({ onLoad, onStart }: LoaderProps) => {\n    const [fileName, setFileName] = useState<string | null>();\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const [data, setData] = useState<dto.Contest | null>(null);\n\n    const handleLoad = async (e: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const file = e.currentTarget.files?.item(0);\n        if (file) {\n            const content = await util.readFile(file);\n            const data = JSON.parse(content) as unknown as dto.Contest; // FIXME: validate\n            data.problems.sort((lhs, rhs) => {\n                if (lhs.tag !== rhs.tag) {\n                    return lhs.tag < rhs.tag ? (-1) : 1;\n                }\n                return 0;\n            });\n            setFileName(file.name);\n            setData(data);\n            onLoad(data);\n        }\n    };\n\n    useEffect(() => {\n        const loadRemote = async (): Promise<void> => {\n            const remoteFileUrl: string | undefined = getRemoteFileUrl();\n            if (remoteFileUrl) {\n                const resp = await fetch(remoteFileUrl);\n                const data = await resp.json() as unknown as dto.Contest; // FIXME: validate\n                setFileName(remoteFileUrl);\n                setData(data);\n                onLoad(data);\n            }\n        };\n        loadRemote().catch(err => console.error(err));\n    }, [onLoad]);\n\n    const [form] = Form.useForm();\n\n    const handleStart = useCallback(() => {\n        const autoReveal = !!form.getFieldValue(\"autoReveal\");\n        const shiningBeforeReveal = !!form.getFieldValue(\"shiningBeforeReveal\");\n        const speedFactor = parseFloat(form.getFieldValue(\"speedFactor\"));\n        const showMedal = (data?.medal !== undefined) && (!!form.getFieldValue(\"showMedal\"));\n        const darkMode = !!form.getFieldValue(\"darkMode\");\n        onStart({ autoReveal, shiningBeforeReveal, speedFactor, showMedal, darkMode });\n    }, [onStart, form, data]);\n\n    return (\n        <Card\n            style={{\n                borderColor: \"transparent\",\n                boxShadow: \"0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)\",\n            }}\n        >\n            <input\n                type=\"file\"\n                style={{ display: \"none\" }}\n                multiple={false}\n                ref={fileInputRef}\n                onChange={handleLoad}\n            />\n            <Row justify=\"center\" style={{ alignItems: \"baseline\" }}>\n                {(fileName) ? (\n                    <span style={{ flexGrow: 1, textAlign: \"center\", margin: \"0 1em\" }}>\n                        {fileName}\n                    </span>\n                ) : null}\n                <Button\n                    icon={<UploadOutlined />}\n                    onClick={(): void => fileInputRef.current?.click()}\n                >\n                    加载数据\n                </Button>\n            </Row>\n            {data === null ? null : (\n                <>\n                    <Divider style={{ margin: \"1em 0\" }} />\n                    <Row style={{ marginTop: \"1em\" }}>\n                        <Descriptions\n                            column={{ xs: 1, lg: 3 }}\n                            title={\n                                <span\n                                    style={{\n                                        display: \"inline-block\",\n                                        width: \"100%\",\n                                        textAlign: \"center\",\n                                        fontSize: \"1.5em\"\n                                    }}\n                                >\n                                    {data.name}\n                                </span>\n                            }\n                        >\n                            <Descriptions.Item label=\"比赛时长\">\n                                {data.duration / 60000} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"封榜时刻\">\n                                <InputNumber\n                                    defaultValue={data.freezeTime / 60000}\n                                    formatter={(v?: number | string) => `${String(v)}`}\n                                    onChange={(v) => data.freezeTime = Number(v) * 60000}\n                                    step={10}\n                                />\n                                分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"罚时单位\">\n                                {data.penaltyTime} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目数量\">\n                                {data.problems.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"队伍数量\">\n                                {data.teams.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"提交数量\">\n                                {data.submissions.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目颜色\" span={3}>\n                                <Space style={{\n                                    display: \"inline-flex\",\n                                    flexWrap: \"wrap\"\n                                }}>\n                                    {data.problems.map(p => {\n                                        return (\n                                            <Tag\n                                                key={p.id}\n                                                style={{\n                                                    display: \"inline-flex\",\n                                                    alignItems: \"center\",\n                                                }}\n                                            >\n                                                <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                                <span\n                                                    style={{\n                                                        display: \"inline-block\",\n                                                        width: \"1em\",\n                                                        height: \"1em\",\n                                                        backgroundColor: p.color,\n                                                        borderRadius: \"50%\"\n                                                    }}\n                                                />\n                                            </Tag>\n                                        );\n                                    })}\n                                </Space>\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Row>\n                    <Row>\n                        <Form form={form} style={{ width: \"100%\" }} layout=\"inline\"\n                            initialValues={{ autoReveal: false, shiningBeforeReveal: true, speedFactor: 2, showMedal: true }}\n                        >\n                            <Form.Item name=\"autoReveal\" label=\"自动运行\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            <Form.Item name=\"shiningBeforeReveal\" label=\"题目闪烁动画\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            <Form.Item name=\"speedFactor\" label=\"速度因子\">\n                                <InputNumber min={vo.MIN_SPEED_FACTOR} max={vo.MAX_SPEED_FACTOR} step={0.1} />\n                            </Form.Item>\n                            <Form.Item name=\"darkMode\" label=\"黑暗模式\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            {/* {data.medal === undefined ? null : (\n                                <Form.Item name=\"showMedal\" label=\"显示奖牌\" valuePropName=\"checked\">\n                                    <Switch />\n                                </Form.Item>\n                            )} */}\n                        </Form>\n                    </Row>\n                    <Row justify=\"center\" style={{ marginTop: \"1em\" }}>\n                        <Col span={6} style={{ display: \"flex\", justifyContent: \"center\" }}>\n                            <Button\n                                icon={<PlayCircleOutlined />}\n                                onClick={handleStart}\n                                style={{ width: \"100%\" }}\n                            >\n                                开始\n                            </Button>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Card>\n    );\n};\n\nexport default Loader;\n","import \"./Board.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport * as util from \"./util\";\n\nimport React, { useState, useEffect, useCallback, useRef, useMemo, CSSProperties } from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { Transition } from \"react-transition-group\";\nimport { Tooltip, message } from \"antd\";\nimport { WomanOutlined } from \"@ant-design/icons\";\n\nfunction cvtColor(state: vo.ProblemStateKind): string | undefined {\n    if (state === vo.ProblemStateKind.Passed) {\n        return \"green\";\n    }\n    if (state === vo.ProblemStateKind.Failed) {\n        return \"red\";\n    }\n    if (state === vo.ProblemStateKind.Pending) {\n        return \"#4343ff\";\n    }\n    return undefined;\n}\n\nfunction messageInfo(content: string): void {\n    void message.info({ content, className: \"info-message\", duration: 0.4 });\n}\n\ninterface BoardProps {\n    data: dto.Contest;\n    options: vo.BoardOptions;\n}\n\nconst Board: React.FC<BoardProps> = ({ data, options }: BoardProps) => {\n\n    const [state, setState] = useState<vo.ContestState>(useMemo(() => vo.calcContestState(data), [data]));\n\n    const [highlightItem, setHighlightItem] = useState<vo.HighlightItem | null>(null);\n\n    const revealGen = useRef<vo.RevealGen>(vo.reveal(state));\n\n    const highlightNodeRef = useRef<HTMLSpanElement | null>(null);\n\n    const [highlightFlag, setHighlightFlag] = useState<boolean>(false);\n\n    const [keyLock, setKeyLock] = useState<boolean>(false);\n\n    const [autoReveal, setAutoReveal] = useState<boolean>(options.autoReveal);\n    const [speedFactor, setSpeedFactor] = useState<number>(options.speedFactor);\n\n    const [focusIndex, setFocusIndex] = useState<number>(state.cursor.focus);\n\n    const handleNextStep = useCallback(() => {\n        console.log(new Date().getTime(), \"handleNextStep\");\n        const prevCursorIdx = state.cursor.index;\n        const item = revealGen.current.next();\n        setFocusIndex(state.cursor.focus);\n        if (state.cursor.index !== prevCursorIdx && state.cursor.index >= 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n            const rect = element.getBoundingClientRect();\n            window.scrollTo({ left: 0, top: window.scrollY + rect.top - window.innerHeight / 2, behavior: \"smooth\" });\n        }\n        console.log(\"cursor index = \", state.cursor.index);\n        if (!item.done) {\n            if (item.value) {\n                const value = item.value;\n                void (async (): Promise<void> => {\n                    console.log(\"reveal highlight\");\n                    setKeyLock(true);\n                    console.log(\"locked\");\n                    setHighlightItem(value);\n\n                    let delay;\n                    delay = options.shiningBeforeReveal ? 600 : (autoReveal ? 200 : 0);\n                    console.log(\"delay\", delay / speedFactor);\n                    await util.delay(delay / speedFactor);  // wait for shining\n                    handleNextStep();\n\n                    delay = autoReveal ? (value.accepted ? 500 : 200) : (0);\n                    console.log(\"delay\", delay / speedFactor);\n                    await util.delay(delay / speedFactor); // wait for showing result\n\n                    const team = state.teamStates.find(t => t.info.id === value.teamId);\n                    const prevRank = team?.rank;\n                    handleNextStep();\n                    const curRank = team?.rank;\n\n                    if (prevRank !== curRank) {\n                        delay = vo.FLIP_MOVE_DURATION;\n                        console.log(\"delay\", delay / speedFactor);\n                        await util.delay(delay / speedFactor); // wait for moving up\n                    }\n\n                    setKeyLock(false);\n                    console.log(\"unlocked\");\n                })();\n            } else {\n                setHighlightItem(null);\n            }\n        } else {\n            setHighlightItem(null);\n        }\n        setState({ ...state });\n        return item.done;\n    }, [state, speedFactor, options.shiningBeforeReveal, autoReveal]);\n\n    // useEffect(() => {\n    //     if (state.cursor.tick === 0) {\n    //         const team = state.teamStates[state.cursor.index];\n    //         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    //         const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n    //         const dis = element.getBoundingClientRect().top + window.scrollY;\n    //         const dur = 10;\n    //         let count = 0;\n    //         const frame = () => {\n    //             window.scrollBy({ left: 0, top: dis / dur / 60, behavior: \"auto\" });\n    //             count += 1;\n    //             if (count < dur * 60) {\n    //                 window.requestAnimationFrame(frame);\n    //             } else {\n    //                 setKeyLock(false);\n    //             }\n    //         };\n    //         setKeyLock(true);\n    //         setTimeout(() => {\n    //             window.requestAnimationFrame(frame);\n    //         }, 2000);\n    //     }\n    // }, [state]);\n\n    useEffect(() => {\n        if (state.cursor.tick === 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n            element.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }, [state]);\n\n    const handleKeydown = useCallback((e: KeyboardEvent) => {\n        console.log(\"keydown\", e.key);\n        if (e.key === \"Enter\") {\n            if (state.cursor.index < 0) {\n                return;\n            }\n            if (keyLock) {\n                return;\n            }\n            handleNextStep();\n        }\n        if (e.key === \"p\") {\n            if (autoReveal) {\n                console.log(\"disable autoReveal\");\n                messageInfo(\"禁用自动运行\");\n            } else {\n                console.log(\"enable autoReveal\");\n                messageInfo(\"启用自动运行\");\n            }\n            setAutoReveal(a => !a);\n        }\n        if (e.key === \"+\") {\n            const s = Math.min(speedFactor + 0.5, vo.MAX_SPEED_FACTOR);\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n            messageInfo(`速度因子：${s.toFixed(1)}`);\n        }\n        if (e.key === \"-\") {\n            const s = Math.max(speedFactor - 0.5, vo.MIN_SPEED_FACTOR);\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n            messageInfo(`速度因子：${s.toFixed(1)}`);\n        }\n        if (e.key === \"Control\") {\n            let s = speedFactor + 3;\n            if (s > vo.MAX_SPEED_FACTOR) { s -= vo.MAX_SPEED_FACTOR; }\n            if (s < vo.MIN_SPEED_FACTOR) { s = vo.MIN_SPEED_FACTOR; }\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n            messageInfo(`速度因子：${s.toFixed(1)}`);\n        }\n    }, [handleNextStep, keyLock, speedFactor, state.cursor, autoReveal]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleKeydown);\n        return () => document.removeEventListener(\"keydown\", handleKeydown);\n    }, [handleKeydown]);\n\n    const handleClick = useCallback(() => {\n        if (state.cursor.index < 0) {\n            return;\n        }\n        if (keyLock) { return; }\n        console.log(\"click\");\n        handleNextStep();\n    }, [handleNextStep, keyLock, state.cursor]);\n\n    useEffect(() => {\n        document.addEventListener(\"click\", handleClick);\n        return () => document.removeEventListener(\"click\", handleClick);\n    }, [handleClick]);\n\n    useEffect(() => {\n        if (state.cursor.tick !== 0 && autoReveal && state.cursor.index >= 0) {\n            const timer = setInterval(() => {\n                if (keyLock) { return; }\n                const done = handleNextStep();\n                if (done) { clearInterval(timer); }\n            }, 500 / speedFactor);\n            return () => clearInterval(timer);\n        }\n    }, [state, keyLock, handleNextStep, autoReveal, speedFactor]);\n\n    useEffect(() => {\n        if (highlightItem && options.shiningBeforeReveal) {\n            setHighlightFlag(f => !f);\n            const timer = setInterval(() => {\n                setHighlightFlag(f => {\n                    console.log(\"flag\", !f);\n                    return !f;\n                });\n            }, 400 / speedFactor);\n            return () => clearInterval(timer);\n        }\n    }, [highlightItem, options, speedFactor]);\n\n    const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n\n    useEffect(() => {\n        const handleResize = () => setWindowWidth(window.innerWidth);\n        window.onresize = handleResize;\n        return () => { window.onresize = null; };\n    }, []);\n\n    const handleMovingFinished = useCallback(() => {\n        setFocusIndex(state.cursor.index);\n    }, [state.cursor]);\n\n    return (\n        <StickyContainer style={{\n            width: \"100%\",\n            backgroundColor: options.darkMode ? \"#24292e\" : undefined,\n        }}>\n            <Sticky>\n                {({ style }) => (\n                    <table\n                        className=\"board-head\"\n                        style={style}\n                    >\n                        <thead>\n                            <tr\n                                style={{\n                                    backgroundColor: options.darkMode ? \"#24292e\" : \"white\",\n                                    color: options.darkMode ? \"white\" : undefined,\n                                }}\n                            >\n                                <th style={{ width: \"5%\" }}>\n                                    <span\n                                        style={{\n                                            position: \"absolute\", zIndex: 2048, top: 0, left: 0,\n                                            borderRadius: \"50%\", width: \"6px\", height: \"6px\",\n                                            backgroundColor: keyLock ? \"#ff4d4f\" : \"#52c41a\"\n                                        }}\n                                    />\n                                    Rank\n                                </th>\n                                <th style={{ width: \"20%\" }}>\n                                    Team\n                                </th>\n                                <th style={{ width: \"10%\" }}>\n                                    Score\n                                </th>\n                                {data.problems.map(p => (\n                                    <th\n                                        key={p.id}\n                                        style={{\n                                            width: `${65 / data.problems.length}%`,\n                                        }}\n                                    >\n                                        <span\n                                            style={{\n                                                display: \"inline-flex\",\n                                                alignItems: \"center\"\n                                            }}\n                                        >\n                                            <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    width: \"1em\",\n                                                    height: \"1em\",\n                                                    backgroundColor: p.color,\n                                                    borderRadius: \"50%\"\n                                                }}\n                                            />\n                                        </span>\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                    </table>\n                )}\n            </Sticky>\n\n            <FlipMove\n                className=\"board-body\"\n                duration={vo.FLIP_MOVE_DURATION / speedFactor}\n                onFinish={handleMovingFinished}\n            >\n\n                {state.teamStates.map((team, idx) => {\n                    const isFocused = idx === focusIndex;\n\n                    // const medalColor = (() => {\n                    //     if (state.info.medal && options.showMedal) {\n                    //         const goldLine = state.info.medal.gold;\n                    //         const silverLine = goldLine + state.info.medal.silver;\n                    //         const bronzeLine = silverLine + state.info.medal.bronze;\n                    //         if (idx < goldLine) {\n                    //             return \"#fff9c0\";\n                    //         } else if (idx < silverLine) {\n                    //             return \"#f6f6f6\";\n                    //         } else if (idx < bronzeLine) {\n                    //             return \"#eddccf\";\n                    //         }\n                    //         return undefined;\n                    //     }\n                    // })();\n\n                    const color = options.darkMode ? \"white\" : undefined;\n                    const boxShadow = options.darkMode ?\n                        \"0 5px 12px 4px rgba(255, 255, 255, 0.09), 0 -5px 12px 4px rgba(255, 255, 255, 0.09)\"\n                        : \"0 5px 12px 4px rgba(0, 0, 0, 0.09), 0 -5px 12px 4px rgba(0, 0, 0, 0.09)\";\n\n\n                    const whiteBorder = isFocused ? \"1px solid transparent\" : \"1px solid #f0f0f0\";\n                    const darkBorder = isFocused ? \"1px solid #666666\" : \"none\";\n\n                    return (\n                        <table\n                            key={team.info.id}\n                            id={`team-id-${team.info.id}`}\n                            className={(isFocused ? \"focused-team\" : \"team\")}\n                            style={{\n                                border: options.darkMode ? (darkBorder) : (whiteBorder),\n                                boxShadow: isFocused ? boxShadow : undefined,\n                                background: isFocused ? (options.darkMode ? \"#24292e\" : \"white\") : undefined\n                            }}\n                        >\n                            <tbody>\n                                <tr\n                                    style={{\n                                        transform: isFocused ? \"perspective(65535px) translateZ(1px)\" : undefined,\n                                        color,\n                                    }}\n                                >\n                                    <td style={{ width: \"5%\" }}>\n                                        {team.info.wildcard ? `*${team.rank}` : team.rank}\n                                    </td>\n                                    <Tooltip\n                                        title={\n                                            team.info.userName ?\n                                                `${team.info.userName} - ${team.info.name}`\n                                                : `${team.info.name}`\n                                        }\n                                    >\n                                        <td\n                                            style={{\n                                                maxWidth: `${windowWidth * 0.20}px`,\n                                                width: \"20%\",\n                                                whiteSpace: \"pre-wrap\",\n                                            }}\n                                        >\n                                            {team.info.name}\n                                            {team.info.gender === \"female\" ? (<WomanOutlined style={{ color: \"pink\" }} />) : undefined}\n                                        </td>\n                                    </Tooltip>\n                                    <td style={{ width: \"10%\" }}>\n                                        {`${team.solved} - ${Math.round(team.penalty / 60000)}`}\n                                    </td>\n                                    {team.problemStates.map((p) => {\n                                        const isHighlighted = highlightItem\n                                            && highlightItem.teamId === team.info.id\n                                            && highlightItem.problemId === p.info.id;\n\n                                        const text = (() => {\n                                            if (p.state === vo.ProblemStateKind.Untouched) {\n                                                return undefined;\n                                            }\n                                            if (p.state === vo.ProblemStateKind.Passed) {\n                                                const penalty = Math.round((p.acceptTime ?? 0) / 60000) + (p.tryCount - 1) * state.info.penaltyTime;\n                                                return `${p.tryCount} - ${penalty}`;\n                                            }\n                                            return `${p.tryCount}`;\n                                        })();\n\n                                        const duration = 400 / speedFactor;\n\n                                        const isFirstSolver = state.firstSolvers[p.info.id] === team.info.id;\n                                        const backgroundColor = isFirstSolver ? \"orange\" : cvtColor(p.state);\n                                        const color = \"white\";\n\n                                        const grid = (style: CSSProperties) => (\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    maxWidth: \"4em\",\n                                                    width: \"100%\",\n                                                    minHeight: \"1em\",\n                                                    borderRadius: \"0.25em\",\n                                                    backgroundColor,\n                                                    color,\n                                                    transition: `opacity ${duration}ms ease-in-out`,\n                                                    opacity: 1,\n                                                    ...style\n                                                }}\n                                                ref={isHighlighted ? highlightNodeRef : null}\n                                            >\n                                                {text}\n                                            </span>\n                                        );\n\n                                        const transitionStyles = {\n                                            entering: { opacity: 0 },\n                                            entered: { opacity: 0 },\n                                            exiting: { opacity: 1 },\n                                            exited: { opacity: 1 },\n                                            unmounted: {}\n                                        };\n\n                                        const wrappedGrid = isHighlighted ? (\n                                            <Transition\n                                                in={highlightFlag}\n                                                timeout={duration}\n                                                nodeRef={highlightNodeRef}\n                                            >\n                                                {(state) => grid(transitionStyles[state])}\n                                            </Transition>\n                                        ) : grid({});\n\n                                        return (\n                                            <td key={p.info.id} style={{ width: `${65 / team.problemStates.length}%` }}>\n                                                {wrappedGrid}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            </tbody>\n                        </table>\n                    );\n                })}\n            </FlipMove>\n\n            <div\n                style={{\n                    minHeight: \"50vh\"\n                }}\n            />\n        </StickyContainer>\n    );\n};\n\nexport default Board;","import \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport Loader from \"./Loader\";\n\nimport React, { useState, useCallback, } from \"react\";\nimport { Row, Col, } from \"antd\";\nimport Board from \"./Board\";\n\nconst App: React.FC = () => {\n    const [data, setData] = useState<dto.Contest | null>(null);\n    const [options, setOptions] = useState<vo.BoardOptions | null>(null);\n\n    const [running, setRunning] = useState(false);\n\n    const handleStart = useCallback((options) => {\n        setRunning(true);\n        setOptions(options);\n        console.debug(data, options);\n    }, [data]);\n\n    const handleLoad = useCallback((data) => setData(data), []);\n\n    return (\n        <>\n            {!running ? (\n                <Row justify=\"center\" style={{ marginTop: \"0em\", alignItems: \"center\", minHeight: \"80vh\" }}>\n                    <Col span={24} lg={16}>\n                        <Loader onLoad={handleLoad} onStart={handleStart} />\n                    </Col>\n                </Row>\n            ) : null}\n            {(data !== null && running) ? (\n                <>\n                    <Row justify=\"center\" style={{ width: \"calc(100vw - 4px)\" }}>\n                        {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                        <Board data={data} options={options!} />\n                    </Row>\n                </>\n            ) : null}\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./app/App\";\n\nReactDOM.render(\n    // <React.StrictMode>\n    <App />,\n    // </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}