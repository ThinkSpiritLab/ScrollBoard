{"version":3,"sources":["serviceWorker.ts","app/util.ts","app/Loader.tsx","app/vo.ts","app/Board.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","toString","onerror","readAsText","delay","ms","setTimeout","getRemoteFileUrl","value","queryString","search","ProblemStateKind","Loader","onLoad","onStart","useState","fileName","setFileName","fileInputRef","useRef","data","setData","handleLoad","a","currentTarget","files","item","util","content","JSON","parse","name","useEffect","remoteFileUrl","fetch","resp","json","loadRemote","catch","err","console","error","Form","useForm","form","handleStart","useCallback","autoReveal","getFieldValue","shiningBeforeReveal","speedFactor","parseFloat","style","borderColor","boxShadow","type","display","multiple","ref","onChange","justify","alignItems","flexGrow","textAlign","margin","icon","UploadOutlined","onClick","current","click","marginTop","column","xs","lg","title","width","fontSize","Item","label","duration","freezeTime","penaltyTime","problems","length","teams","submissions","span","flexWrap","map","p","key","id","marginRight","tag","height","backgroundColor","color","borderRadius","layout","initialValues","valuePropName","min","max","step","justifyContent","PlayCircleOutlined","reveal","calcRankInplace","state","teamStates","sort","lhs","rhs","solved","penalty","info","last_solved","last_penalty","last_rank","forEach","team","idx","rank","checked","cursor","index","problemStates","find","Pending","tick","isAccepted","unrevealedSubmissions","some","s","accepted","teamId","problemId","Passed","findIndex","tryCount","acceptTime","submitTime","Math","floor","Failed","revealedSubmissions","push","prevRank","curRank","log","cvtColor","vo","Board","options","useMemo","teamMap","Map","contestant","set","problem","Untouched","submission","get","Error","Array","from","entries","setState","highlightItem","setHighlightItem","revealGen","highlightNodeRef","highlightFlag","setHighlightFlag","keyLock","setKeyLock","setAutoReveal","setSpeedFactor","handleNextStep","Date","getTime","prevCursorIdx","next","rect","document","querySelector","getBoundingClientRect","scrollTo","left","top","scrollY","innerHeight","behavior","done","scrollIntoView","handleKeydown","addEventListener","removeEventListener","handleClick","timer","setInterval","clearInterval","f","innerWidth","windowWidth","setWindowWidth","onresize","zIndex","position","overflowAnchor","isFocused","border","undefined","maxWidth","whiteSpace","overflow","textOverflow","isHighlighted","text","grid","minHeight","transition","opacity","transitionStyles","entering","entered","exiting","exited","unmounted","wrappedGrid","Transition","in","timeout","nodeRef","App","setOptions","running","setRunning","debug","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.443aca7d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function readFile(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (e: ProgressEvent<FileReader>): void => {\n            resolve(e.target?.result?.toString());\n        };\n\n        reader.onerror = ((e): void => reject(e));\n\n        reader.readAsText(file);\n    });\n}\n\nexport function delay(ms: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(), ms);\n    });\n}","import * as dto from \"./dto\";\nimport * as util from \"./util\";\nimport * as vo from \"./vo\";\n\nimport React, { useState, useRef, useEffect, useCallback, } from \"react\";\nimport { Card, Button, Row, Divider, Descriptions, Space, Tag, Col, Form, Switch, InputNumber } from \"antd\";\nimport { UploadOutlined, PlayCircleOutlined } from \"@ant-design/icons\";\nimport * as queryString from \"query-string\";\n\nexport interface LoaderProps {\n    onLoad: (data: dto.Contest) => void;\n    onStart: (options: vo.BoardOptions) => void;\n}\n\nfunction getRemoteFileUrl(): string | undefined {\n    const value = queryString.parse(window.location.search)[\"data-url\"];\n    if (typeof value === \"string\") {\n        return value;\n    } else {\n        return undefined;\n    }\n}\n\nconst Loader: React.FC<LoaderProps> = ({ onLoad, onStart }: LoaderProps) => {\n    const [fileName, setFileName] = useState<string | null>();\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const [data, setData] = useState<dto.Contest | null>(null);\n\n    const handleLoad = async (e: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const file = e.currentTarget.files?.item(0);\n        if (file) {\n            const content = await util.readFile(file);\n            const data = JSON.parse(content) as unknown as dto.Contest; // FIXME: validate\n            setFileName(file.name);\n            setData(data);\n            onLoad(data);\n        }\n    };\n\n    useEffect(() => {\n        const loadRemote = async (): Promise<void> => {\n            const remoteFileUrl: string | undefined = getRemoteFileUrl();\n            if (remoteFileUrl) {\n                const resp = await fetch(remoteFileUrl);\n                const data = await resp.json() as unknown as dto.Contest; // FIXME: validate\n                setFileName(remoteFileUrl);\n                setData(data);\n                onLoad(data);\n            }\n        };\n        loadRemote().catch(err => console.error(err));\n    }, [onLoad]);\n\n    const [form] = Form.useForm();\n\n    const handleStart = useCallback(() => {\n        const autoReveal = !!form.getFieldValue(\"autoReveal\");\n        const shiningBeforeReveal = !!form.getFieldValue(\"shiningBeforeReveal\");\n        const speedFactor = parseFloat(form.getFieldValue(\"speedFactor\"));\n        onStart({ autoReveal, shiningBeforeReveal, speedFactor });\n    }, [onStart, form]);\n\n    return (\n        <Card\n            style={{\n                borderColor: \"transparent\",\n                boxShadow: \"0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)\",\n            }}\n        >\n            <input\n                type=\"file\"\n                style={{ display: \"none\" }}\n                multiple={false}\n                ref={fileInputRef}\n                onChange={handleLoad}\n            />\n            <Row justify=\"center\" style={{ alignItems: \"baseline\" }}>\n                {(fileName) ? (\n                    <span style={{ flexGrow: 1, textAlign: \"center\", margin: \"0 1em\" }}>\n                        {fileName}\n                    </span>\n                ) : null}\n                <Button\n                    icon={<UploadOutlined />}\n                    onClick={(): void => fileInputRef.current?.click()}\n                >\n                    加载数据\n                </Button>\n            </Row>\n            {data === null ? null : (\n                <>\n                    <Divider style={{ margin: \"1em 0\" }} />\n                    <Row style={{ marginTop: \"1em\" }}>\n                        <Descriptions\n                            column={{ xs: 1, lg: 3 }}\n                            title={\n                                <span\n                                    style={{\n                                        display: \"inline-block\",\n                                        width: \"100%\",\n                                        textAlign: \"center\",\n                                        fontSize: \"1.5em\"\n                                    }}\n                                >\n                                    {data.name}\n                                </span>\n                            }\n                        >\n                            <Descriptions.Item label=\"比赛时长\">\n                                {data.duration / 60000} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"封榜时刻\">\n                                {data.freezeTime / 60000}  分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"罚时单位\">\n                                {data.penaltyTime / 60000} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目数量\">\n                                {data.problems.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"队伍数量\">\n                                {data.teams.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"提交数量\">\n                                {data.submissions.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目颜色\" span={3}>\n                                <Space style={{\n                                    display: \"inline-flex\",\n                                    flexWrap: \"wrap\"\n                                }}>\n                                    {data.problems.map(p => {\n                                        return (\n                                            <Tag\n                                                key={p.id}\n                                                style={{\n                                                    display: \"inline-flex\",\n                                                    alignItems: \"center\",\n                                                }}\n                                            >\n                                                <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                                <span\n                                                    style={{\n                                                        display: \"inline-block\",\n                                                        width: \"1em\",\n                                                        height: \"1em\",\n                                                        backgroundColor: p.color,\n                                                        borderRadius: \"50%\"\n                                                    }}\n                                                />\n                                            </Tag>\n                                        );\n                                    })}\n                                </Space>\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Row>\n                    <Row>\n                        <Form form={form} style={{ width: \"100%\" }} layout=\"inline\"\n                            initialValues={{ autoReveal: false, shiningBeforeReveal: true, speedFactor: 1 }}\n                        >\n                            <Form.Item name=\"autoReveal\" label=\"自动运行\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            <Form.Item name=\"shiningBeforeReveal\" label=\"题目闪烁动画\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            <Form.Item name=\"speedFactor\" label=\"速度因子\">\n                                <InputNumber min={0.1} max={10} step={0.1} />\n                            </Form.Item>\n                        </Form>\n                    </Row>\n                    <Row justify=\"center\" style={{ marginTop: \"1em\" }}>\n                        <Col span={6} style={{ display: \"flex\", justifyContent: \"center\" }}>\n                            <Button\n                                icon={<PlayCircleOutlined />}\n                                onClick={handleStart}\n                                style={{ width: \"100%\" }}\n                            >\n                                开始\n                            </Button>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Card>\n    );\n};\n\nexport default Loader;\n","import * as dto from \"./dto\";\n\nexport interface TeamState {\n    info: dto.Team;\n    rank: number;\n    solved: number;\n    penalty: number;\n    problemStates: ProblemState[]\n}\n\nexport interface ProblemState {\n    info: dto.Problem;\n    revealedSubmissions: dto.Submission[];\n    unrevealedSubmissions: dto.Submission[];\n    state: ProblemStateKind;\n    tryCount: number;\n    acceptTime: number | null;\n}\n\nexport enum ProblemStateKind {\n    Passed,\n    Failed,\n    Pending,\n    Untouched,\n}\n\nexport interface ContestState {\n    teamStates: TeamState[]\n    info: dto.Contest;\n    cursor: { index: number, tick: number };\n}\n\nexport function calcContestState(data: dto.Contest): ContestState {\n    const teamMap: Map<string, TeamState> = new Map<string, TeamState>();\n    data.teams.forEach(contestant => {\n        teamMap.set(\n            contestant.id,\n            {\n                info: contestant,\n                rank: 0,\n                solved: 0,\n                penalty: 0,\n                problemStates: data.problems.map(problem => ({\n                    info: problem,\n                    revealedSubmissions: [],\n                    unrevealedSubmissions: [],\n                    state: ProblemStateKind.Untouched,\n                    tryCount: 0,\n                    acceptTime: null,\n                }))\n            });\n    });\n\n    data.submissions.sort((lhs, rhs) => lhs.submitTime - rhs.submitTime);\n\n    data.submissions.forEach(submission => {\n        const team = teamMap.get(submission.teamId);\n        if (!team) {\n            throw new Error(\"invalid data\");\n        }\n        const p = team.problemStates.find(p => p.info.id === submission.problemId);\n        if (!p) {\n            throw new Error(\"invalid data\");\n        }\n        if (p.state === ProblemStateKind.Passed) {\n            return;\n        }\n        if (submission.submitTime < data.freezeTime) {\n            p.revealedSubmissions.push(submission);\n            p.tryCount += 1;\n            if (submission.accepted) {\n                p.state = ProblemStateKind.Passed;\n                p.acceptTime = submission.submitTime;\n                team.solved += 1;\n                team.penalty += Math.floor(p.acceptTime / 60000) * 60000 + data.penaltyTime * (p.tryCount - 1);\n            } else {\n                p.state = ProblemStateKind.Failed;\n            }\n        } else {\n            p.unrevealedSubmissions.push(submission);\n            p.tryCount += 1;\n            p.state = ProblemStateKind.Pending;\n        }\n    });\n\n    const teamStates = Array.from(teamMap.entries()).map((e) => e[1]);\n    const state = { teamStates, info: data, cursor: { index: teamStates.length - 1, tick: 0 } };\n    calcRankInplace(state);\n    return state;\n}\n\nexport function calcRankInplace(state: ContestState): void {\n    state.teamStates.sort((lhs, rhs) => {\n        if (lhs.solved !== rhs.solved) {\n            return -(lhs.solved - rhs.solved);\n        }\n        if (lhs.penalty !== rhs.penalty) {\n            return (lhs.penalty - rhs.penalty);\n        }\n        if (lhs.info.name !== rhs.info.name) {\n            return lhs.info.name < rhs.info.name ? (-1) : (1);\n        }\n        return 0;\n    });\n\n    let last_solved = 0;\n    let last_penalty = 0;\n    let last_rank = 0;\n    state.teamStates.forEach((team, idx) => {\n        if (team.solved < last_solved || team.penalty > last_penalty) {\n            last_rank = idx + 1;\n        }\n        team.rank = last_rank;\n        last_solved = team.solved;\n        last_penalty = team.penalty;\n    });\n}\n\nexport type HighlightItem = {\n    teamId: string;\n    problemId: string;\n    accepted: boolean;\n}\n\nexport type RevealGen = Generator<HighlightItem | undefined, void, void>;\n\nexport function* reveal(state: ContestState): Generator<HighlightItem | undefined, void, void> {\n    let checked = true;\n    while (state.cursor.index >= 0) {\n        const team = state.teamStates[state.cursor.index];\n        const p = team.problemStates.find(p => p.state === ProblemStateKind.Pending);\n        if (p) {\n            if (!checked) {\n                state.cursor.tick += 1;\n                yield;\n            }\n\n            const isAccepted = p.unrevealedSubmissions.some((s) => s.accepted);\n            state.cursor.tick += 1;\n            yield {\n                teamId: team.info.id,\n                problemId: p.info.id,\n                accepted: isAccepted\n            };\n            if (isAccepted) {\n                p.state = ProblemStateKind.Passed;\n                const idx = p.unrevealedSubmissions.findIndex(s => s.accepted);\n                p.tryCount = p.tryCount - p.unrevealedSubmissions.length + idx + 1;\n                p.acceptTime = p.unrevealedSubmissions[idx].submitTime;\n                team.solved += 1;\n                team.penalty += Math.floor(p.acceptTime / 60000) * 60000 + state.info.penaltyTime * (p.tryCount - 1);\n            } else {\n                p.state = ProblemStateKind.Failed;\n            }\n            p.revealedSubmissions.push(...p.unrevealedSubmissions);\n            p.unrevealedSubmissions = [];\n            yield;\n            const prevRank = team.rank;\n            calcRankInplace(state);\n            const curRank = team.rank;\n            console.log(`team \"${team.info.name}\" rank ${prevRank} -> ${curRank}`);\n            state.cursor.tick += 1;\n            yield;\n            checked = true;\n        }\n        else {\n            if (!checked) {\n                console.log(\"yield at cursor index = \", state.cursor.index);\n                state.cursor.tick += 1;\n                yield;\n            }\n            state.cursor.index -= 1;\n            checked = false;\n        }\n    }\n}\n\nexport interface BoardOptions {\n    autoReveal: boolean;\n    shiningBeforeReveal: boolean;\n    speedFactor: number;\n}","import * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport * as util from \"./util\";\n\nimport React, { useState, useEffect, useCallback, useRef, useMemo, CSSProperties } from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { Transition } from \"react-transition-group\";\nimport { Tooltip } from \"antd\";\n\nfunction cvtColor(state: vo.ProblemStateKind): string | undefined {\n    if (state === vo.ProblemStateKind.Passed) {\n        return \"green\";\n    }\n    if (state === vo.ProblemStateKind.Failed) {\n        return \"red\";\n    }\n    if (state === vo.ProblemStateKind.Pending) {\n        return \"orange\";\n    }\n    return undefined;\n}\n\ninterface BoardProps {\n    data: dto.Contest;\n    options: vo.BoardOptions;\n}\n\nconst Board: React.FC<BoardProps> = ({ data, options }: BoardProps) => {\n\n    const [state, setState] = useState<vo.ContestState>(useMemo(() => vo.calcContestState(data), [data]));\n\n    const [highlightItem, setHighlightItem] = useState<vo.HighlightItem | null>(null);\n\n    const revealGen = useRef<vo.RevealGen>(vo.reveal(state));\n\n    const highlightNodeRef = useRef<HTMLSpanElement | null>(null);\n\n    const [highlightFlag, setHighlightFlag] = useState<boolean>(false);\n\n    const [keyLock, setKeyLock] = useState<boolean>(false);\n\n    const [autoReveal, setAutoReveal] = useState<boolean>(options.autoReveal);\n    const [speedFactor, setSpeedFactor] = useState<number>(options.speedFactor);\n\n    const handleNextStep = useCallback(() => {\n        console.log(new Date().getTime(), \"handleNextStep\");\n        const prevCursorIdx = state.cursor.index;\n        const item = revealGen.current.next();\n        if (state.cursor.index !== prevCursorIdx && state.cursor.index >= 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n            const rect = element.getBoundingClientRect();\n            window.scrollTo({ left: 0, top: window.scrollY + rect.top - window.innerHeight / 2, behavior: \"smooth\" });\n        }\n        console.log(\"cursor index = \", state.cursor.index);\n        if (!item.done) {\n            if (item.value) {\n                const value = item.value;\n                void (async (): Promise<void> => {\n                    console.log(\"reveal highlight\");\n                    setKeyLock(true);\n                    console.log(\"locked\");\n                    setHighlightItem(value);\n\n                    let delay;\n                    delay = options.shiningBeforeReveal ? 1200 : (autoReveal ? 400 : 0);\n                    console.log(\"delay\", delay / speedFactor);\n                    await util.delay(delay / speedFactor);  // wait for shining\n                    handleNextStep();\n\n                    delay = autoReveal ? (value.accepted ? 800 : 300) : (0);\n                    console.log(\"delay\", delay / speedFactor);\n                    await util.delay(delay / speedFactor); // wait for showing result\n                    handleNextStep();\n\n                    setKeyLock(false);\n                    console.log(\"unlocked\");\n                })();\n            } else {\n                setHighlightItem(null);\n            }\n        } else {\n            setHighlightItem(null);\n        }\n        setState({ ...state });\n        return item.done;\n    }, [state, speedFactor, options.shiningBeforeReveal, autoReveal]);\n\n    // useEffect(() => {\n    //     if (state.cursor.tick === 0) {\n    //         const team = state.teamStates[state.cursor.index];\n    //         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    //         const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n    //         const dis = element.getBoundingClientRect().top + window.scrollY;\n    //         const dur = 10;\n    //         let count = 0;\n    //         const frame = () => {\n    //             window.scrollBy({ left: 0, top: dis / dur / 60, behavior: \"auto\" });\n    //             count += 1;\n    //             if (count < dur * 60) {\n    //                 window.requestAnimationFrame(frame);\n    //             } else {\n    //                 setKeyLock(false);\n    //             }\n    //         };\n    //         setKeyLock(true);\n    //         setTimeout(() => {\n    //             window.requestAnimationFrame(frame);\n    //         }, 2000);\n    //     }\n    // }, [state]);\n\n    useEffect(() => {\n        if (state.cursor.tick === 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n            element.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }, [state]);\n\n    const handleKeydown = useCallback((e: KeyboardEvent) => {\n        console.log(\"keydown\", e.key);\n        if (e.key === \"Enter\") {\n            if (state.cursor.index < 0) {\n                return;\n            }\n            if (keyLock) {\n                return;\n            }\n            handleNextStep();\n        }\n        if (e.key === \"p\") {\n            setAutoReveal(a => {\n                if (a) {\n                    console.log(\"disable autoReveal\");\n                } else {\n                    console.log(\"enable autoReveal\");\n                }\n                return !a;\n            });\n        }\n        if (e.key === \"+\") {\n            const s = speedFactor + 0.1;\n            if (s > 10) { return; }\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n        }\n        if (e.key === \"-\") {\n            const s = speedFactor - 0.1;\n            if (s < 0.1) { return; }\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n        }\n    }, [handleNextStep, keyLock, speedFactor, state.cursor]);\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleKeydown);\n        return () => document.removeEventListener(\"keydown\", handleKeydown);\n    }, [handleKeydown]);\n\n    const handleClick = useCallback(() => {\n        if (state.cursor.index < 0) {\n            return;\n        }\n        if (keyLock) { return; }\n        console.log(\"click\");\n        handleNextStep();\n    }, [handleNextStep, keyLock, state.cursor]);\n\n    useEffect(() => {\n        document.addEventListener(\"click\", handleClick);\n        return () => document.removeEventListener(\"click\", handleClick);\n    }, [handleClick]);\n\n    useEffect(() => {\n        if (state.cursor.tick !== 0 && autoReveal && state.cursor.index >= 0) {\n            const timer = setInterval(() => {\n                if (keyLock) { return; }\n                const done = handleNextStep();\n                if (done) { clearInterval(timer); }\n            }, 500 / speedFactor);\n            return () => clearInterval(timer);\n        }\n    }, [state, keyLock, handleNextStep, autoReveal, speedFactor]);\n\n    useEffect(() => {\n        if (highlightItem && options.shiningBeforeReveal) {\n            setHighlightFlag(f => !f);\n            const timer = setInterval(() => {\n                setHighlightFlag(f => {\n                    console.log(\"flag\", !f);\n                    return !f;\n                });\n            }, 400 / speedFactor);\n            return () => clearInterval(timer);\n        }\n    }, [highlightItem, options, speedFactor]);\n\n    const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n\n    useEffect(() => {\n        const handleResize = () => setWindowWidth(window.innerWidth);\n        window.onresize = handleResize;\n        return () => { window.onresize = null; };\n    }, []);\n\n    return (\n        <StickyContainer style={{ width: \"100%\" }}>\n            <Sticky>\n                {({ style }) => (\n                    <table\n                        style={{\n                            width: \"100%\",\n                            fontSize: \"2em\",\n                            textAlign: \"center\",\n                            backgroundColor: \"white\",\n                            zIndex: 1024,\n                            boxShadow: \"0 5px 8px 4px rgba(0, 0, 0, 0.09)\",\n                            ...style\n                        }}\n                    >\n                        <thead>\n                            <tr>\n                                <th style={{ width: \"5%\" }}>\n                                    <span\n                                        style={{\n                                            position: \"absolute\", zIndex: 2048, top: 0, left: 0,\n                                            borderRadius: \"50%\", width: \"6px\", height: \"6px\",\n                                            backgroundColor: keyLock ? \"#ff4d4f\" : \"#52c41a\"\n                                        }}\n                                    />\n                                    Rank\n                                </th>\n                                <th style={{ width: \"20%\" }}>\n                                    Team\n                                </th>\n                                <th style={{ width: \"10%\" }}>\n                                    Score\n                                </th>\n                                {data.problems.map(p => (\n                                    <th\n                                        key={p.id}\n                                        style={{\n                                            width: `${65 / data.problems.length}%`,\n                                        }}\n                                    >\n                                        <span\n                                            style={{\n                                                display: \"inline-flex\",\n                                                alignItems: \"center\"\n                                            }}\n                                        >\n                                            <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    width: \"1em\",\n                                                    height: \"1em\",\n                                                    backgroundColor: p.color,\n                                                    borderRadius: \"50%\"\n                                                }}\n                                            />\n                                        </span>\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                    </table>\n                )}\n            </Sticky>\n\n            <FlipMove\n                style={{\n                    width: \"100%\",\n                    overflowAnchor: \"none\",\n                    fontSize: \"2em\",\n                    textAlign: \"center\",\n                }}\n                duration={2000 / speedFactor}\n            >\n\n                {state.teamStates.map((team, idx) => {\n                    const isFocused = idx === state.cursor.index;\n\n                    return (\n                        <table\n                            key={team.info.id}\n                            id={`team-id-${team.info.id}`}\n                            style={{\n                                width: \"100%\",\n                                border: isFocused ? \"none\" : \"1px solid #f0f0f0\",\n                                boxShadow:\n                                    isFocused ?\n                                        \"0 5px 12px 4px rgba(0, 0, 0, 0.09), 0 -5px 12px 4px rgba(0, 0, 0, 0.09)\"\n                                        : undefined\n                            }}\n                        >\n                            <tbody>\n                                <tr>\n                                    <td style={{ width: \"5%\" }}>\n                                        {team.rank}\n                                    </td>\n                                    <Tooltip title={team.info.name}>\n                                        <td\n                                            style={{\n                                                maxWidth: `${windowWidth * 0.20}px`,\n                                                width: \"20%\",\n                                                whiteSpace: \"nowrap\",\n                                                overflow: \"hidden\",\n                                                textOverflow: \"ellipsis\"\n                                            }}\n                                        >\n                                            {team.info.name}\n                                        </td>\n                                    </Tooltip>\n                                    <td style={{ width: \"10%\" }}>\n                                        {`${team.solved} - ${Math.floor(team.penalty / 60000)}`}\n                                    </td>\n                                    {team.problemStates.map((p) => {\n                                        const isHighlighted = highlightItem\n                                            && highlightItem.teamId === team.info.id\n                                            && highlightItem.problemId === p.info.id;\n\n                                        const text = p.state === vo.ProblemStateKind.Untouched ? (undefined) : (\n                                            p.state === vo.ProblemStateKind.Passed ?\n                                                `${p.tryCount} - ${Math.floor((p.acceptTime ?? 0) / 60000)}`\n                                                : `${p.tryCount}`\n                                        );\n\n                                        const duration = 400 / speedFactor;\n\n                                        const grid = (style: CSSProperties) => (\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    maxWidth: \"4em\",\n                                                    width: \"100%\",\n                                                    minHeight: \"1em\",\n                                                    borderRadius: \"0.25em\",\n                                                    backgroundColor: cvtColor(p.state),\n                                                    color: \"white\",\n                                                    transition: `opacity ${duration}ms ease-in-out`,\n                                                    opacity: 1,\n                                                    ...style\n                                                }}\n                                                ref={isHighlighted ? highlightNodeRef : null}\n                                            >\n                                                {text}\n                                            </span>\n                                        );\n\n                                        const transitionStyles = {\n                                            entering: { opacity: 0 },\n                                            entered: { opacity: 0 },\n                                            exiting: { opacity: 1 },\n                                            exited: { opacity: 1 },\n                                            unmounted: {}\n                                        };\n\n                                        const wrappedGrid = isHighlighted ? (\n                                            <Transition\n                                                in={highlightFlag}\n                                                timeout={duration}\n                                                nodeRef={highlightNodeRef}\n                                            >\n                                                {(state) => grid(transitionStyles[state])}\n                                            </Transition>\n                                        ) : grid({});\n\n                                        return (\n                                            <td key={p.info.id} style={{ width: `${65 / team.problemStates.length}%` }}>\n                                                {wrappedGrid}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            </tbody>\n                        </table>\n                    );\n                })}\n            </FlipMove>\n        </StickyContainer>\n    );\n};\n\nexport default Board;","import \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport Loader from \"./Loader\";\n\nimport React, { useState, useCallback, } from \"react\";\nimport { Row, Col, } from \"antd\";\nimport Board from \"./Board\";\n\nconst App: React.FC = () => {\n    const [data, setData] = useState<dto.Contest | null>(null);\n    const [options, setOptions] = useState<vo.BoardOptions | null>(null);\n\n    const [running, setRunning] = useState(false);\n\n    const handleStart = useCallback((options) => {\n        setRunning(true);\n        setOptions(options);\n        console.debug(data, options);\n    }, [data]);\n\n    const handleLoad = useCallback((data) => setData(data), []);\n\n    return (\n        <>\n            {!running ? (\n                <Row justify=\"center\" style={{ marginTop: \"0em\", alignItems: \"center\", minHeight: \"80vh\" }}>\n                    <Col span={24} lg={16}>\n                        <Loader onLoad={handleLoad} onStart={handleStart} />\n                    </Col>\n                </Row>\n            ) : null}\n            {(data !== null && running) ? (\n                <>\n                    <Row justify=\"center\" style={{ width: \"calc(100vw - 4px)\" }}>\n                        {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                        <Board data={data} options={options!} />\n                    </Row>\n                    <div style={{ minHeight: \"50vh\" }}></div>\n                </>\n            ) : null}\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./app/App\";\n\nReactDOM.render(\n    // <React.StrictMode>\n    <App />,\n    // </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}