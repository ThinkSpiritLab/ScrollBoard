{"version":3,"sources":["serviceWorker.ts","app/util.ts","app/vo.ts","app/Loader.tsx","app/effects.ts","app/Board.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","toString","onerror","readAsText","delay","ms","setTimeout","runInterval","f","timer","setInterval","stop","clearInterval","ProblemStateKind","reveal","calcSubmissionScore","rule","submission","score","accepted","undefined","calcRankInplace","state","teamStates","sort","lhs","rhs","penalty","lhsId","parseInt","info","id","rhsId","last_score","last_penalty","last_rank","forEach","team","idx","wildcard","rank","cursor","focus","index","problem","problemStates","find","p","Pending","s","findMaxScoreUnrevealedSubmission","Error","tick","teamId","problemId","passed","highestScore","passIndex","passTime","penaltyTime","submitTime","Passed","Failed","firstSolvers","tryCount","unrevealedSubmissions","length","revealedSubmissions","push","prevRank","curRank","console","log","name","findIndex","t","Object","is","ans","ans_score","getRemoteFileUrl","value","queryString","search","Loader","onLoad","onStart","useState","fileName","setFileName","fileInputRef","useRef","data","setData","handleLoad","a","currentTarget","files","item","util","content","JSON","parse","problems","tag","useEffect","remoteFileUrl","fetch","resp","json","loadRemote","catch","err","error","Form","useForm","form","handleStart","useCallback","autoReveal","getFieldValue","shiningBeforeReveal","speedFactor","parseFloat","showMedal","medal","darkMode","style","borderColor","boxShadow","type","display","multiple","ref","onChange","justify","alignItems","flexGrow","textAlign","margin","icon","UploadOutlined","onClick","current","click","marginTop","column","xs","lg","title","width","fontSize","Item","label","duration","defaultValue","freezeTime","formatter","v","String","Number","step","teams","submissions","span","flexWrap","map","key","marginRight","height","backgroundColor","color","borderRadius","layout","initialValues","valuePropName","min","max","justifyContent","PlayCircleOutlined","useEventListener","document","addEventListener","removeEventListener","messageInfo","message","className","Board","options","useMemo","teamMap","Map","teamState","Untouched","set","get","Array","from","values","vo","setState","highlightItem","setHighlightItem","revealGen","highlightNodeRef","highlightFlag","setHighlightFlag","keyLock","setKeyLock","setAutoReveal","setSpeedFactor","focusIndex","setFocusIndex","handleNextStep","Date","getTime","prevCursorIdx","next","rect","querySelector","getBoundingClientRect","scrollTo","left","top","scrollY","innerHeight","behavior","done","scrollIntoView","Math","toFixed","windowWidth","innerWidth","setWindowWidth","onresize","useWindowResize","handleMovingFinished","position","zIndex","onFinish","isFocused","whiteBorder","darkBorder","border","background","transform","userName","maxWidth","whiteSpace","certifiedName","gender","WomanOutlined","round","isHighlighted","gridInner","maxScore","cvtColor","grid","minHeight","transition","opacity","transitionStyles","entering","entered","exiting","exited","unmounted","wrappedGrid","Transition","in","timeout","nodeRef","App","setOptions","running","setRunning","debug","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e81aa2fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function readFile(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (e: ProgressEvent<FileReader>): void => {\n            resolve(e.target?.result?.toString() ?? \"\");\n        };\n\n        reader.onerror = ((e): void => reject(e));\n\n        reader.readAsText(file);\n    });\n}\n\nexport function delay(ms: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(), ms);\n    });\n}\n\ninterface Interval {\n    stop(): void;\n}\n\nexport function runInterval(ms: number, f: () => void): Interval {\n    const timer = setInterval(f, ms);\n    return {\n        stop() { clearInterval(timer); }\n    };\n}","import * as dto from \"./dto\";\n\nexport interface BoardOptions {\n    autoReveal: boolean;\n    shiningBeforeReveal: boolean;\n    speedFactor: number;\n    showMedal: boolean;\n    darkMode: boolean;\n}\n\nexport const MIN_SPEED_FACTOR = 0.1;\nexport const MAX_SPEED_FACTOR = 10;\n\nexport const FLIP_MOVE_DURATION = 800;\n\nexport interface ContestState {\n    info: dto.Contest,\n    teamStates: TeamState[],\n    firstSolvers: { [problemId: string]: string | undefined; } // problemId -> teamId\n    cursor: {\n        index: number,\n        tick: number,\n        focus: number\n    };\n}\n\nexport interface TeamState {\n    info: dto.Team,\n    problemStates: ProblemState[],\n    rank: number,\n    score: number,\n    penalty: number,\n}\n\nexport interface ProblemState {\n    info: dto.Problem,\n    state: ProblemStateKind,\n    revealedSubmissions: [number, dto.Submission][],\n    unrevealedSubmissions: [number, dto.Submission][],\n    highestScore: number,\n    passIndex: number | null,\n    passTime: number | null,\n    tryCount: number,\n}\n\nexport enum ProblemStateKind {\n    Untouched = 0,\n    Pending = 1,\n    Passed = 2,\n    Failed = 3,\n}\n\nexport function calcContestState(data: dto.Contest): ContestState {\n    data.submissions.sort((lhs, rhs) => lhs.submitTime - rhs.submitTime);\n    data.problems.sort((lhs, rhs) => {\n        if (lhs.tag !== rhs.tag) {\n            return lhs.tag < rhs.tag ? (-1) : 1;\n        }\n        return 0;\n    });\n\n    const teamMap: Map<string, TeamState> = new Map<string, TeamState>();\n\n    for (const team of data.teams) {\n        const teamState: TeamState = {\n            info: team,\n            problemStates: data.problems.map(problem => ({\n                info: problem,\n                revealedSubmissions: [],\n                unrevealedSubmissions: [],\n                state: ProblemStateKind.Untouched,\n                highestScore: 0,\n                passIndex: null,\n                passTime: null,\n                tryCount: 0,\n            })),\n            rank: 0,\n            score: 0,\n            penalty: 0,\n        };\n        teamMap.set(team.id, teamState);\n    }\n\n    const firstSolvers: { [problemId: string]: string | undefined } = {};\n    const rule = data.rule ?? \"icpc\";\n\n    for (const submission of data.submissions) {\n        const team = teamMap.get(submission.teamId);\n        if (!team) continue;\n\n        const problem = team.problemStates.find(p => p.info.id === submission.problemId);\n        if (!problem) {\n            throw new Error(\"invalid data\");\n        }\n\n        if (rule === \"icpc\" && problem.state === ProblemStateKind.Passed) {\n            continue;\n        }\n\n        const index = problem.revealedSubmissions.length + problem.unrevealedSubmissions.length;\n        if (submission.submitTime >= data.freezeTime) {\n            problem.unrevealedSubmissions.push([index, submission]);\n            problem.state = ProblemStateKind.Pending;\n        } else {\n            const score = calcSubmissionScore(rule, submission);\n            if (score > problem.highestScore) {\n                if (problem.passIndex !== null && problem.passTime !== null) {\n                    team.score -= problem.highestScore;\n                    team.penalty -= problem.passTime + data.penaltyTime * 60000 * problem.passIndex;\n                }\n                problem.highestScore = score;\n                problem.passIndex = index;\n                problem.passTime = submission.submitTime;\n                team.score += problem.highestScore;\n                team.penalty += problem.passTime + data.penaltyTime * 60000 * problem.passIndex;\n            }\n            problem.revealedSubmissions.push([index, submission]);\n            problem.state = (problem.highestScore > 0 ? ProblemStateKind.Passed : ProblemStateKind.Failed);\n            problem.tryCount += 1;\n\n            if (firstSolvers[problem.info.id] === undefined && submission.accepted) {\n                firstSolvers[problem.info.id] = team.info.id;\n            }\n        }\n    }\n\n\n    const teamStates = Array.from(teamMap.values());\n\n    const state: ContestState = {\n        info: data,\n        teamStates,\n        firstSolvers,\n        cursor: {\n            index: teamStates.length - 1,\n            tick: 0,\n            focus: teamStates.length - 1,\n        }\n    };\n\n    calcRankInplace(state);\n    return state;\n}\n\nfunction calcSubmissionScore(rule: \"icpc\" | \"ioi\", submission: dto.Submission): number {\n    let score = 0;\n    if (rule === \"icpc\" && submission.accepted) {\n        score = 1;\n    }\n    if (rule === \"ioi\" && submission.score !== undefined) {\n        score = submission.score;\n    }\n    return score;\n}\n\nfunction calcRankInplace(state: ContestState): void {\n    state.teamStates.sort((lhs, rhs) => {\n        if (lhs.score !== rhs.score) {\n            return -(lhs.score - rhs.score);\n        }\n        if (lhs.penalty !== rhs.penalty) {\n            return (lhs.penalty - rhs.penalty);\n        }\n        const lhsId = parseInt(lhs.info.id);\n        const rhsId = parseInt(rhs.info.id);\n        if (lhsId !== rhsId) {\n            return lhsId < rhsId ? (-1) : (1);\n        }\n        return 0;\n    });\n\n    let last_score = 0;\n    let last_penalty = 0;\n    let last_rank = 1;\n\n    state.teamStates.forEach((team, idx) => {\n        if (team.info.wildcard) {\n            team.rank = last_rank;\n            return;\n        }\n        if (team.score < last_score || team.penalty > last_penalty) {\n            last_rank = idx + 1;\n        }\n        team.rank = last_rank;\n        last_score = team.score;\n        last_penalty = team.penalty;\n    });\n}\n\nexport type HighlightItem = {\n    teamId: string;\n    problemId: string;\n    passed: boolean;\n}\n\nexport type RevealGen = Generator<HighlightItem | undefined, void, void>;\n\nexport function* reveal(state: ContestState): Generator<HighlightItem | undefined, void, void> {\n    const rule = state.info.rule ?? \"icpc\";\n\n    while (state.cursor.index >= 0) {\n        state.cursor.focus = state.cursor.index;\n        const team = state.teamStates[state.cursor.index];\n        const problem = team.problemStates.find(p => p.state === ProblemStateKind.Pending);\n\n        if (problem) {\n            const s = findMaxScoreUnrevealedSubmission(rule, problem);\n            if (!s) {\n                throw new Error(\"logic error\");\n            }\n            const [index, submission] = s;\n            const score = calcSubmissionScore(rule, submission);\n\n            state.cursor.tick += 1;\n            yield {\n                teamId: team.info.id,\n                problemId: problem.info.id,\n                passed: score > problem.highestScore,\n            };\n\n            if (score > problem.highestScore) {\n                if (problem.passIndex !== null && problem.passTime !== null) {\n                    team.score -= problem.highestScore;\n                    team.penalty -= problem.passTime + state.info.penaltyTime * 60000 * problem.passIndex;\n                }\n                problem.highestScore = score;\n                problem.passIndex = index;\n                problem.passTime = submission.submitTime;\n                team.score += problem.highestScore;\n                team.penalty += problem.passTime + state.info.penaltyTime * 60000 * problem.passIndex;\n            }\n            problem.state = (problem.highestScore > 0 ? ProblemStateKind.Passed : ProblemStateKind.Failed);\n            if (state.firstSolvers[problem.info.id] === undefined && submission.accepted) {\n                state.firstSolvers[problem.info.id] = team.info.id;\n            }\n            if (problem.state === ProblemStateKind.Failed) {\n                problem.tryCount += problem.unrevealedSubmissions.length;\n            }\n            problem.unrevealedSubmissions = [];\n            problem.revealedSubmissions.push(...problem.unrevealedSubmissions);\n\n            state.cursor.tick += 1;\n            yield;\n\n            const prevRank = team.rank;\n            calcRankInplace(state);\n            const curRank = team.rank;\n            console.log(`team \"${team.info.name}\" rank ${prevRank} -> ${curRank}`);\n            state.cursor.focus = state.teamStates.findIndex(t => Object.is(t, team));\n\n            state.cursor.tick += 1;\n            yield;\n\n        } else {\n            if (state.cursor.index !== state.teamStates.length - 1) {\n                state.cursor.tick += 1;\n                yield;\n            }\n            state.cursor.index -= 1;\n        }\n    }\n    state.cursor.focus = -1;\n}\n\nfunction findMaxScoreUnrevealedSubmission(rule: \"icpc\" | \"ioi\", problem: ProblemState): [number, dto.Submission] | null {\n    let ans: [number, dto.Submission] | null = null;\n    let ans_score = 0;\n    for (const s of problem.unrevealedSubmissions) {\n        const score = calcSubmissionScore(rule, s[1]);\n        if (ans === null) {\n            ans = s;\n            ans_score = score;\n        } else if (score > ans_score) {\n            ans = s;\n        }\n    }\n    return ans;\n}","import * as dto from \"./dto\";\nimport * as util from \"./util\";\nimport * as vo from \"./vo\";\n\nimport React, { useState, useRef, useEffect, useCallback, } from \"react\";\nimport { Card, Button, Row, Divider, Descriptions, Space, Tag, Col, Form, Switch, InputNumber } from \"antd\";\nimport { UploadOutlined, PlayCircleOutlined } from \"@ant-design/icons\";\nimport * as queryString from \"query-string\";\n\nexport interface LoaderProps {\n    onLoad: (data: dto.Contest) => void;\n    onStart: (options: vo.BoardOptions) => void;\n}\n\nfunction getRemoteFileUrl(): string | undefined {\n    const value = queryString.parse(window.location.search)[\"data-url\"];\n    if (typeof value === \"string\") {\n        return value;\n    } else {\n        return undefined;\n    }\n}\n\nconst Loader: React.FC<LoaderProps> = ({ onLoad, onStart }: LoaderProps) => {\n    const [fileName, setFileName] = useState<string | null>();\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n    const [data, setData] = useState<dto.Contest | null>(null);\n\n    const handleLoad = async (e: React.ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const file = e.currentTarget.files?.item(0);\n        if (file) {\n            const content = await util.readFile(file);\n            const data = JSON.parse(content) as unknown as dto.Contest; // FIXME: validate\n            data.problems.sort((lhs, rhs) => {\n                if (lhs.tag !== rhs.tag) {\n                    return lhs.tag < rhs.tag ? (-1) : 1;\n                }\n                return 0;\n            });\n            setFileName(file.name);\n            setData(data);\n            onLoad(data);\n        }\n    };\n\n    useEffect(() => {\n        const loadRemote = async (): Promise<void> => {\n            const remoteFileUrl: string | undefined = getRemoteFileUrl();\n            if (remoteFileUrl) {\n                const resp = await fetch(remoteFileUrl);\n                const data = await resp.json() as unknown as dto.Contest; // FIXME: validate\n                setFileName(remoteFileUrl);\n                setData(data);\n                onLoad(data);\n            }\n        };\n        loadRemote().catch(err => console.error(err));\n    }, [onLoad]);\n\n    const [form] = Form.useForm();\n\n    const handleStart = useCallback(() => {\n        const autoReveal = !!form.getFieldValue(\"autoReveal\");\n        const shiningBeforeReveal = !!form.getFieldValue(\"shiningBeforeReveal\");\n        const speedFactor = parseFloat(form.getFieldValue(\"speedFactor\"));\n        const showMedal = (data?.medal !== undefined) && (!!form.getFieldValue(\"showMedal\"));\n        const darkMode = !!form.getFieldValue(\"darkMode\");\n        onStart({ autoReveal, shiningBeforeReveal, speedFactor, showMedal, darkMode });\n    }, [onStart, form, data]);\n\n    return (\n        <Card\n            style={{\n                borderColor: \"transparent\",\n                boxShadow: \"0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)\",\n            }}\n        >\n            <input\n                type=\"file\"\n                style={{ display: \"none\" }}\n                multiple={false}\n                ref={fileInputRef}\n                onChange={handleLoad}\n            />\n            <Row justify=\"center\" style={{ alignItems: \"baseline\" }}>\n                {(fileName) ? (\n                    <span style={{ flexGrow: 1, textAlign: \"center\", margin: \"0 1em\" }}>\n                        {fileName}\n                    </span>\n                ) : null}\n                <Button\n                    icon={<UploadOutlined />}\n                    onClick={(): void => fileInputRef.current?.click()}\n                >\n                    加载数据\n                </Button>\n            </Row>\n            {data === null ? null : (\n                <>\n                    <Divider style={{ margin: \"1em 0\" }} />\n                    <Row style={{ marginTop: \"1em\" }}>\n                        <Descriptions\n                            column={{ xs: 1, lg: 3 }}\n                            title={\n                                <span\n                                    style={{\n                                        display: \"inline-block\",\n                                        width: \"100%\",\n                                        textAlign: \"center\",\n                                        fontSize: \"1.5em\"\n                                    }}\n                                >\n                                    {data.name}\n                                </span>\n                            }\n                        >\n                            <Descriptions.Item label=\"比赛时长\">\n                                {data.duration / 60000} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"封榜时刻\">\n                                <InputNumber\n                                    defaultValue={data.freezeTime / 60000}\n                                    formatter={(v?: number | string) => `${String(v)}`}\n                                    onChange={(v) => data.freezeTime = Number(v) * 60000}\n                                    step={10}\n                                />\n                                分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"罚时单位\">\n                                {data.penaltyTime} 分钟\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目数量\">\n                                {data.problems.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"队伍数量\">\n                                {data.teams.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"提交数量\">\n                                {data.submissions.length}\n                            </Descriptions.Item>\n                            <Descriptions.Item label=\"题目颜色\" span={3}>\n                                <Space style={{\n                                    display: \"inline-flex\",\n                                    flexWrap: \"wrap\"\n                                }}>\n                                    {data.problems.map(p => {\n                                        return (\n                                            <Tag\n                                                key={p.id}\n                                                style={{\n                                                    display: \"inline-flex\",\n                                                    alignItems: \"center\",\n                                                }}\n                                            >\n                                                <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                                <span\n                                                    style={{\n                                                        display: \"inline-block\",\n                                                        width: \"1em\",\n                                                        height: \"1em\",\n                                                        backgroundColor: p.color,\n                                                        borderRadius: \"50%\"\n                                                    }}\n                                                />\n                                            </Tag>\n                                        );\n                                    })}\n                                </Space>\n                            </Descriptions.Item>\n                        </Descriptions>\n                    </Row>\n                    <Row>\n                        <Form form={form} style={{ width: \"100%\" }} layout=\"inline\"\n                            initialValues={{ autoReveal: false, shiningBeforeReveal: true, speedFactor: 2, showMedal: true }}\n                        >\n                            <Form.Item name=\"autoReveal\" label=\"自动运行\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            <Form.Item name=\"shiningBeforeReveal\" label=\"题目闪烁动画\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            <Form.Item name=\"speedFactor\" label=\"速度因子\">\n                                <InputNumber min={vo.MIN_SPEED_FACTOR} max={vo.MAX_SPEED_FACTOR} step={0.1} />\n                            </Form.Item>\n                            <Form.Item name=\"darkMode\" label=\"黑暗模式\" valuePropName=\"checked\">\n                                <Switch />\n                            </Form.Item>\n                            {/* {data.medal === undefined ? null : (\n                                <Form.Item name=\"showMedal\" label=\"显示奖牌\" valuePropName=\"checked\">\n                                    <Switch />\n                                </Form.Item>\n                            )} */}\n                        </Form>\n                    </Row>\n                    <Row justify=\"center\" style={{ marginTop: \"1em\" }}>\n                        <Col span={6} style={{ display: \"flex\", justifyContent: \"center\" }}>\n                            <Button\n                                icon={<PlayCircleOutlined />}\n                                onClick={handleStart}\n                                style={{ width: \"100%\" }}\n                            >\n                                开始\n                            </Button>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </Card>\n    );\n};\n\nexport default Loader;\n","import { useState, useEffect } from \"react\";\n\nexport function useWindowResize(): { width: number } {\n    const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n    useEffect(() => {\n        window.onresize = () => setWindowWidth(window.innerWidth);\n        return () => { window.onresize = null; };\n    }, []);\n    return { width: windowWidth };\n}\n\nexport function useEventListener<K extends keyof DocumentEventMap>(type: K, f: (ev: DocumentEventMap[K]) => void): void {\n    useEffect(() => {\n        document.addEventListener(type, f);\n        return () => document.removeEventListener(type, f);\n    }, [type, f]);\n}","import \"./Board.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport * as util from \"./util\";\nimport { useEventListener, useWindowResize } from \"./effects\";\n\nimport React, { useState, useEffect, useCallback, useRef, useMemo, CSSProperties } from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { Transition } from \"react-transition-group\";\nimport { Tooltip, message } from \"antd\";\nimport { WomanOutlined } from \"@ant-design/icons\";\n\nfunction cvtColor(problem: vo.ProblemState): string | undefined {\n    if (problem.state === vo.ProblemStateKind.Passed) {\n        const maxScore = problem.info.score;\n        if (maxScore === undefined) {\n            return \"green\";\n        }\n        if (problem.highestScore === maxScore) {\n            return \"#33cc33\";\n        }\n        if (problem.highestScore > maxScore * 0.75) {\n            return \"#cccc00\";\n        }\n        if (problem.highestScore > maxScore * 0.60) {\n            return \"#cc9900\";\n        }\n        return \"#996600\";\n    }\n    if (problem.state === vo.ProblemStateKind.Failed) {\n        return \"red\";\n    }\n    if (problem.state === vo.ProblemStateKind.Pending) {\n        return \"#4343ff\";\n    }\n    return undefined;\n}\n\nfunction messageInfo(content: string): void {\n    void message.info({ content, className: \"info-message\", duration: 0.4 });\n}\n\ninterface BoardProps {\n    data: dto.Contest;\n    options: vo.BoardOptions;\n}\n\nconst Board: React.FC<BoardProps> = ({ data, options }: BoardProps) => {\n\n    const [state, setState] = useState<vo.ContestState>(useMemo(() => vo.calcContestState(data), [data]));\n\n    const [highlightItem, setHighlightItem] = useState<vo.HighlightItem | null>(null);\n\n    const revealGen = useRef<vo.RevealGen>(vo.reveal(state));\n\n    const highlightNodeRef = useRef<HTMLSpanElement | null>(null);\n\n    const [highlightFlag, setHighlightFlag] = useState<boolean>(false);\n\n    const [keyLock, setKeyLock] = useState<boolean>(false);\n\n    const [autoReveal, setAutoReveal] = useState<boolean>(options.autoReveal);\n    const [speedFactor, setSpeedFactor] = useState<number>(options.speedFactor);\n\n    const [focusIndex, setFocusIndex] = useState<number>(state.cursor.focus);\n\n    const handleNextStep = useCallback(() => {\n        console.log(new Date().getTime(), \"handleNextStep\");\n        const prevCursorIdx = state.cursor.index;\n        const item = revealGen.current.next();\n        setFocusIndex(state.cursor.focus);\n        if (state.cursor.index !== prevCursorIdx && state.cursor.index >= 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n            const rect = element.getBoundingClientRect();\n            window.scrollTo({ left: 0, top: window.scrollY + rect.top - window.innerHeight / 2, behavior: \"smooth\" });\n        }\n        console.log(\"cursor index = \", state.cursor.index);\n        if (!item.done) {\n            if (item.value) {\n                const value = item.value;\n                void (async (): Promise<void> => {\n                    console.log(\"reveal highlight\");\n                    setKeyLock(true);\n                    console.log(\"locked\");\n                    setHighlightItem(value);\n\n                    let delay;\n                    delay = options.shiningBeforeReveal ? 600 : (autoReveal ? 200 : 0);\n                    console.log(\"delay\", delay / speedFactor);\n                    await util.delay(delay / speedFactor);  // wait for shining\n                    handleNextStep();\n\n                    delay = autoReveal ? (value.passed ? 500 : 200) : (0);\n                    console.log(\"delay\", delay / speedFactor);\n                    await util.delay(delay / speedFactor); // wait for showing result\n\n                    const team = state.teamStates.find(t => t.info.id === value.teamId);\n                    const prevRank = team?.rank;\n                    handleNextStep();\n                    const curRank = team?.rank;\n\n                    if (prevRank !== curRank) {\n                        delay = vo.FLIP_MOVE_DURATION;\n                        console.log(\"delay\", delay / speedFactor);\n                        await util.delay(delay / speedFactor); // wait for moving up\n                    }\n\n                    setKeyLock(false);\n                    console.log(\"unlocked\");\n                })();\n            } else {\n                setHighlightItem(null);\n            }\n        } else {\n            setHighlightItem(null);\n        }\n        setState({ ...state });\n        return item.done;\n    }, [state, speedFactor, options.shiningBeforeReveal, autoReveal]);\n\n    // useEffect(() => {\n    //     if (state.cursor.tick === 0) {\n    //         const team = state.teamStates[state.cursor.index];\n    //         // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    //         const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n    //         const dis = element.getBoundingClientRect().top + window.scrollY;\n    //         const dur = 10;\n    //         let count = 0;\n    //         const frame = () => {\n    //             window.scrollBy({ left: 0, top: dis / dur / 60, behavior: \"auto\" });\n    //             count += 1;\n    //             if (count < dur * 60) {\n    //                 window.requestAnimationFrame(frame);\n    //             } else {\n    //                 setKeyLock(false);\n    //             }\n    //         };\n    //         setKeyLock(true);\n    //         setTimeout(() => {\n    //             window.requestAnimationFrame(frame);\n    //         }, 2000);\n    //     }\n    // }, [state]);\n\n    useEffect(() => {\n        if (state.cursor.tick === 0) {\n            const team = state.teamStates[state.cursor.index];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const element = document.querySelector<HTMLTableRowElement>(`#team-id-${team.info.id}`)!;\n            element.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }, [state]);\n\n    useEventListener(\"keydown\", useCallback((e: KeyboardEvent) => {\n        console.log(\"keydown\", e.key);\n        if (e.key === \"Enter\") {\n            if (state.cursor.index < 0) {\n                return;\n            }\n            if (keyLock) {\n                return;\n            }\n            handleNextStep();\n        }\n        if (e.key === \"p\") {\n            if (autoReveal) {\n                console.log(\"disable autoReveal\");\n                messageInfo(\"禁用自动运行\");\n            } else {\n                console.log(\"enable autoReveal\");\n                messageInfo(\"启用自动运行\");\n            }\n            setAutoReveal(a => !a);\n        }\n        if (e.key === \"+\") {\n            const s = Math.min(speedFactor + 0.5, vo.MAX_SPEED_FACTOR);\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n            messageInfo(`速度因子：${s.toFixed(1)}`);\n        }\n        if (e.key === \"-\") {\n            const s = Math.max(speedFactor - 0.5, vo.MIN_SPEED_FACTOR);\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n            messageInfo(`速度因子：${s.toFixed(1)}`);\n        }\n        if (e.key === \"Control\") {\n            let s = speedFactor + 3;\n            if (s > vo.MAX_SPEED_FACTOR) { s -= vo.MAX_SPEED_FACTOR; }\n            if (s < vo.MIN_SPEED_FACTOR) { s = vo.MIN_SPEED_FACTOR; }\n            setSpeedFactor(s);\n            console.log(\"speedFactor\", s);\n            messageInfo(`速度因子：${s.toFixed(1)}`);\n        }\n    }, [handleNextStep, keyLock, speedFactor, state.cursor, autoReveal]));\n\n    useEventListener(\"click\", useCallback(() => {\n        if (state.cursor.index < 0) {\n            return;\n        }\n        if (keyLock) { return; }\n        console.log(\"click\");\n        handleNextStep();\n    }, [handleNextStep, keyLock, state.cursor]));\n\n    useEffect(() => {\n        if (state.cursor.tick !== 0 && autoReveal && state.cursor.index >= 0) {\n            const timer = util.runInterval(500 / speedFactor, () => {\n                if (keyLock) { return; }\n                const done = handleNextStep();\n                if (done) { timer.stop(); }\n            });\n            return () => timer.stop();\n        }\n    }, [state, keyLock, handleNextStep, autoReveal, speedFactor]);\n\n    useEffect(() => {\n        if (highlightItem && options.shiningBeforeReveal) {\n            setHighlightFlag(f => !f);\n            const timer = util.runInterval(400 / speedFactor, () => {\n                setHighlightFlag(f => {\n                    console.log(\"flag\", !f);\n                    return !f;\n                });\n            });\n            return () => timer.stop();\n        }\n    }, [highlightItem, options, speedFactor]);\n\n    const windowWidth = useWindowResize().width;\n\n    const handleMovingFinished = useCallback(() => {\n        setFocusIndex(state.cursor.index);\n    }, [state.cursor]);\n\n    return (\n        <StickyContainer style={{\n            width: \"100%\",\n            backgroundColor: options.darkMode ? \"#24292e\" : undefined,\n        }}>\n            <Sticky>\n                {({ style }) => (\n                    <table\n                        className=\"board-head\"\n                        style={style}\n                    >\n                        <thead>\n                            <tr\n                                style={{\n                                    backgroundColor: options.darkMode ? \"#24292e\" : \"white\",\n                                    color: options.darkMode ? \"white\" : undefined,\n                                }}\n                            >\n                                <th style={{ width: \"5%\" }}>\n                                    <span\n                                        style={{\n                                            position: \"absolute\", zIndex: 2048, top: 0, left: 0,\n                                            borderRadius: \"50%\", width: \"6px\", height: \"6px\",\n                                            backgroundColor: keyLock ? \"#ff4d4f\" : \"#52c41a\"\n                                        }}\n                                    />\n                                    Rank\n                                </th>\n                                <th style={{ width: \"20%\" }}>\n                                    Team\n                                </th>\n                                <th style={{ width: \"10%\" }}>\n                                    Score\n                                </th>\n                                {data.problems.map(p => (\n                                    <th\n                                        key={p.id}\n                                        style={{\n                                            width: `${65 / data.problems.length}%`,\n                                        }}\n                                    >\n                                        <span\n                                            style={{\n                                                display: \"inline-flex\",\n                                                alignItems: \"center\"\n                                            }}\n                                        >\n                                            <strong style={{ marginRight: \"0.5em\" }}>{p.tag}</strong>\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    width: \"1em\",\n                                                    height: \"1em\",\n                                                    backgroundColor: p.color,\n                                                    borderRadius: \"50%\"\n                                                }}\n                                            />\n                                        </span>\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                    </table>\n                )}\n            </Sticky>\n\n            <FlipMove\n                className=\"board-body\"\n                duration={vo.FLIP_MOVE_DURATION / speedFactor}\n                onFinish={handleMovingFinished}\n            >\n\n                {state.teamStates.map((team, idx) => {\n                    const isFocused = idx === focusIndex;\n\n                    // const medalColor = (() => {\n                    //     if (state.info.medal && options.showMedal) {\n                    //         const goldLine = state.info.medal.gold;\n                    //         const silverLine = goldLine + state.info.medal.silver;\n                    //         const bronzeLine = silverLine + state.info.medal.bronze;\n                    //         if (idx < goldLine) {\n                    //             return \"#fff9c0\";\n                    //         } else if (idx < silverLine) {\n                    //             return \"#f6f6f6\";\n                    //         } else if (idx < bronzeLine) {\n                    //             return \"#eddccf\";\n                    //         }\n                    //         return undefined;\n                    //     }\n                    // })();\n\n                    const color = options.darkMode ? \"white\" : undefined;\n                    const boxShadow = options.darkMode ?\n                        \"0 5px 12px 4px rgba(255, 255, 255, 0.09), 0 -5px 12px 4px rgba(255, 255, 255, 0.09)\"\n                        : \"0 5px 12px 4px rgba(0, 0, 0, 0.09), 0 -5px 12px 4px rgba(0, 0, 0, 0.09)\";\n\n\n                    const whiteBorder = isFocused ? \"1px solid transparent\" : \"1px solid #f0f0f0\";\n                    const darkBorder = isFocused ? \"1px solid #666666\" : \"none\";\n\n                    return (\n                        <table\n                            key={team.info.id}\n                            id={`team-id-${team.info.id}`}\n                            className={(isFocused ? \"focused-team\" : \"team\")}\n                            style={{\n                                border: options.darkMode ? (darkBorder) : (whiteBorder),\n                                boxShadow: isFocused ? boxShadow : undefined,\n                                background: isFocused ? (options.darkMode ? \"#24292e\" : \"white\") : undefined\n                            }}\n                        >\n                            <tbody>\n                                <tr\n                                    style={{\n                                        transform: isFocused ? \"perspective(65535px) translateZ(1px)\" : undefined,\n                                        color,\n                                    }}\n                                >\n                                    <td style={{ width: \"5%\" }}>\n                                        {team.info.wildcard ? `*${team.rank}` : team.rank}\n                                    </td>\n                                    <Tooltip\n                                        title={\n                                            team.info.userName ?\n                                                `${team.info.userName} - ${team.info.name}`\n                                                : `${team.info.name}`\n                                        }\n                                    >\n                                        <td\n                                            style={{\n                                                maxWidth: `${windowWidth * 0.20}px`,\n                                                width: \"20%\",\n                                                whiteSpace: \"pre-wrap\",\n                                            }}\n                                        >\n                                            {(() => {\n                                                if (team.info.certifiedName !== undefined) {\n                                                    if (team.info.certifiedName !== team.info.name) {\n                                                        return (\n                                                            <>\n                                                                <div>{team.info.name}</div>\n                                                                <div>{team.info.certifiedName}</div>\n                                                            </>\n                                                        );\n                                                    }\n                                                }\n                                                return team.info.name;\n                                            })()}\n                                            {team.info.gender === \"female\" ? (<WomanOutlined style={{ color: \"pink\" }} />) : undefined}\n                                        </td>\n                                    </Tooltip>\n                                    <td style={{ width: \"10%\" }}>\n                                        {`${team.score} - ${Math.round(team.penalty / 60000)}`}\n                                    </td>\n                                    {team.problemStates.map((p) => {\n                                        const isHighlighted = highlightItem\n                                            && highlightItem.teamId === team.info.id\n                                            && highlightItem.problemId === p.info.id;\n\n                                        const gridInner = (() => {\n                                            if (p.state === vo.ProblemStateKind.Untouched) {\n                                                return undefined;\n                                            }\n                                            if (p.state === vo.ProblemStateKind.Passed) {\n                                                const penalty = Math.round((p.passTime ?? 0) / 60000) + (p.passIndex ?? 0) * state.info.penaltyTime;\n                                                // return `${p.highestScore} - ${penalty}`;\n                                                return (\n                                                    <>\n                                                        <div>{p.highestScore}</div>\n                                                        <div>{penalty}</div>\n                                                    </>\n                                                );\n                                            }\n                                            return `${p.tryCount}`;\n                                        })();\n\n                                        const duration = 400 / speedFactor;\n\n                                        const isFirstSolver = state.firstSolvers[p.info.id] === team.info.id;\n                                        const backgroundColor = isFirstSolver ? \"#006600\" : cvtColor(p);\n                                        const color = \"white\";\n\n                                        const grid = (style: CSSProperties) => (\n                                            <span\n                                                style={{\n                                                    display: \"inline-block\",\n                                                    maxWidth: \"4em\",\n                                                    width: \"100%\",\n                                                    minHeight: \"1em\",\n                                                    borderRadius: \"0.25em\",\n                                                    backgroundColor,\n                                                    color,\n                                                    transition: `opacity ${duration}ms ease-in-out`,\n                                                    opacity: 1,\n                                                    ...style\n                                                }}\n                                                ref={isHighlighted ? highlightNodeRef : null}\n                                            >\n                                                {gridInner}\n                                            </span>\n                                        );\n\n                                        const transitionStyles = {\n                                            entering: { opacity: 0 },\n                                            entered: { opacity: 0 },\n                                            exiting: { opacity: 1 },\n                                            exited: { opacity: 1 },\n                                            unmounted: {}\n                                        };\n\n                                        const wrappedGrid = isHighlighted ? (\n                                            <Transition\n                                                in={highlightFlag}\n                                                timeout={duration}\n                                                nodeRef={highlightNodeRef}\n                                            >\n                                                {(state) => grid(transitionStyles[state])}\n                                            </Transition>\n                                        ) : grid({});\n\n                                        return (\n                                            <td key={p.info.id} style={{ width: `${65 / team.problemStates.length}%` }}>\n                                                {wrappedGrid}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            </tbody>\n                        </table>\n                    );\n                })}\n            </FlipMove>\n\n            <div\n                style={{\n                    minHeight: \"50vh\"\n                }}\n            />\n        </StickyContainer>\n    );\n};\n\nexport default Board;","import \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nimport * as dto from \"./dto\";\nimport * as vo from \"./vo\";\nimport Loader from \"./Loader\";\n\nimport React, { useState, useCallback, } from \"react\";\nimport { Row, Col, } from \"antd\";\nimport Board from \"./Board\";\n\nconst App: React.FC = () => {\n    const [data, setData] = useState<dto.Contest | null>(null);\n    const [options, setOptions] = useState<vo.BoardOptions | null>(null);\n\n    const [running, setRunning] = useState(false);\n\n    const handleStart = useCallback((options) => {\n        setRunning(true);\n        setOptions(options);\n        console.debug(data, options);\n    }, [data]);\n\n    const handleLoad = useCallback((data) => setData(data), []);\n\n    return (\n        <>\n            {!running ? (\n                <Row justify=\"center\" style={{ marginTop: \"0em\", alignItems: \"center\", minHeight: \"80vh\" }}>\n                    <Col span={24} lg={16}>\n                        <Loader onLoad={handleLoad} onStart={handleStart} />\n                    </Col>\n                </Row>\n            ) : null}\n            {(data !== null && running) ? (\n                <>\n                    <Row justify=\"center\" style={{ width: \"calc(100vw - 4px)\" }}>\n                        {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                        <Board data={data} options={options!} />\n                    </Row>\n                </>\n            ) : null}\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./app/App\";\n\nReactDOM.render(\n    // <React.StrictMode>\n    <App />,\n    // </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}